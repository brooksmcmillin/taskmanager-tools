name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-


    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install mypy types-requests pytest pytest-cov

    - name: Run mypy type checking
      run: |
        mypy src/

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short
      continue-on-error: true  # Tests might not exist yet

    - name: Generate test coverage report
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: true  # Tests might not exist yet

    - name: Upload coverage to Codecov (optional)
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Run ruff linter
      run: |
        ruff check src/
      continue-on-error: true  # Don't fail CI on linting issues for now
    
    - name: Check code formatting with ruff
      run: |
        ruff format --check src/
      continue-on-error: true  # Don't fail CI on formatting issues for now

  security:
    runs-on: ubuntu-latest
    name: Security Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    
    # 1. Dependency vulnerability scanning with pip-audit
    - name: Install and run pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
        pip install -e .
        pip-audit --desc
      continue-on-error: true  # Don't fail CI but report issues
    
    # 2. Bandit - Security linter for Python
    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f screen -ll  # Only show medium and high severity
      continue-on-error: true
    
    # 3. Safety - Check dependencies for known vulnerabilities
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --continue-on-error
      continue-on-error: true
    
    # 4. Semgrep - SAST tool with Python security rules
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/python
          p/security-audit
          p/secrets
      continue-on-error: true
    
    # 5. Secret scanning with detect-secrets
    - name: Detect Secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
      continue-on-error: true
    
    # 6. License compliance check
    - name: Check license compliance
      run: |
        pip install pip-licenses
        pip-licenses --format=markdown --with-urls --with-description
      continue-on-error: true
    
    # Upload security reports as artifacts
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          .secrets.baseline
        retention-days: 30

  # CodeQL Analysis (GitHub's semantic code analysis)
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"