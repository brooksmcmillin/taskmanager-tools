Metadata-Version: 2.4
Name: taskmanager-tools
Version: 0.1.0
Summary: Tools for task management, paper fetching, and PDF generation
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: python-dotenv
Requires-Dist: reportlab
Requires-Dist: taskmanager-sdk
Requires-Dist: anthropic
Dynamic: license-file

# TaskManager Tools

A comprehensive toolkit for task management, research paper organization, and daily planning. This package provides tools to manage tasks with the TaskManager API, intelligently upload papers to reMarkable tablets, and generate daily planner PDFs.

## Features

### ðŸ“š Research Paper Management
- **ArXiv Integration**: Fetch papers directly from arXiv using paper IDs or URLs
- **Automatic Classification**: Uses Claude AI to analyze papers and categorize them (e.g., MachineLearning, Biology, Mathematics)
- **Smart Naming**: Generates clean, descriptive filenames based on paper content
- **reMarkable Upload**: Automatically uploads papers to your reMarkable tablet with organized directory structure
- **Batch Processing**: Handle multiple papers efficiently

### ðŸ“… Daily Planner PDF Generation
- **TaskManager Integration**: Fetches tasks from your TaskManager instance
- **Custom PDF Layout**: Creates beautifully formatted daily planner pages
- **Schedule Blocks**: Organized time blocks for your daily schedule
- **Task Lists**: Includes your tasks with checkboxes for tracking
- **Notes Section**: Space for daily notes and reflections

### ðŸ”§ Task Management SDK
- **Full API Access**: Complete integration with TaskManager API
- **Task CRUD Operations**: Create, read, update, and delete tasks
- **Authentication**: Secure OAuth2 authentication flow
- **Error Handling**: Robust error handling and retry logic

## Project Structure

```
taskmanager-tools/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ papers/              # Research paper functionality
â”‚   â”‚   â”œâ”€â”€ arxiv_fetcher.py    # ArXiv paper fetching
â”‚   â”‚   â”œâ”€â”€ research_paper_util.py # Paper analysis utilities
â”‚   â”‚   â””â”€â”€ upload.py            # Main upload script
â”‚   â”œâ”€â”€ remarkable/          # reMarkable integration
â”‚   â”‚   â””â”€â”€ rmapi.py            # reMarkable API wrapper
â”‚   â””â”€â”€ pdf/                 # PDF generation
â”‚       â””â”€â”€ generate_pdf.py     # Daily planner generator
â”œâ”€â”€ bin/                     # External binaries
â”‚   â””â”€â”€ rmapi                   # reMarkable CLI tool
â”œâ”€â”€ data/                    # Sample data files
â”œâ”€â”€ tests/                   # Test suite
â””â”€â”€ pyproject.toml          # Package configuration
```

## Prerequisites

- Python 3.10+
- Anthropic Claude API key (for paper analysis)
- TaskManager instance with API credentials (for task management)
- reMarkable tablet (for paper upload)

## Installation

### From Source

1. Clone the repository:
```bash
git clone <repository-url>
cd taskmanager-tools
```

2. Create a virtual environment:
```bash
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```

3. Install the package in development mode:
```bash
pip install -e .
```

4. Create a `.env` file with your credentials:
```bash
# Claude AI for paper analysis
ANTHROPIC_API_KEY=your-claude-api-key

# TaskManager API
TASKMANAGER_CLIENT_ID=your-client-id
TASKMANAGER_CLIENT_SECRET=your-client-secret
TASKMANAGER_URL=https://your-taskmanager-instance.com
```

## Usage

### Upload Research Papers

#### Upload from ArXiv
```bash
# Using ArXiv ID
upload-paper 2301.12345

# Using full ArXiv URL
upload-paper https://arxiv.org/abs/2301.12345

# Using arxiv: prefix
upload-paper arxiv:2301.12345
```

#### Upload Local PDF
```bash
upload-paper path/to/paper.pdf

# Dry run (analyze but don't upload)
upload-paper --dry-run path/to/paper.pdf
```

The tool will:
1. Download the paper (if from ArXiv)
2. Extract and analyze the content using Claude AI
3. Determine an appropriate classification category
4. Generate a concise, descriptive title
5. Create the directory structure on your reMarkable
6. Upload the paper to `/papers/<classification>/`

### Generate Daily Planner PDF

```bash
# Generate today's planner
generate-pdf

# The PDF will be created as daily_planner.pdf
```

The planner includes:
- Header with today's date
- Schedule section with hourly time blocks
- Tasks section fetched from TaskManager
- Notes section for daily reflections

### Python API Usage

```python
from src.papers.arxiv_fetcher import ArxivFetcher
from src.remarkable.rmapi import RMAPI

# Fetch paper from ArXiv
fetcher = ArxivFetcher("2301.12345")
title, category = fetcher.get_metadata()
paper_path = fetcher.download_paper()

# Upload to reMarkable
rmapi = RMAPI()
rmapi.upload_paper(paper_path, title, category)
```

## Directory Structure on reMarkable

Papers are automatically organized:
```
/papers/
â”œâ”€â”€ MachineLearning/
â”‚   â”œâ”€â”€ Transformer Architecture Attention.pdf
â”‚   â””â”€â”€ Neural Network Optimization.pdf
â”œâ”€â”€ Biology/
â”‚   â””â”€â”€ Protein Folding Dynamics.pdf
â””â”€â”€ Mathematics/
    â””â”€â”€ Graph Theory Applications.pdf
```

## Configuration

### Environment Variables
- `ANTHROPIC_API_KEY`: Claude API key for paper analysis
- `TASKMANAGER_CLIENT_ID`: TaskManager OAuth client ID
- `TASKMANAGER_CLIENT_SECRET`: TaskManager OAuth client secret
- `TASKMANAGER_URL`: TaskManager instance URL
- `RMAPI_CONFIG`: Path to rmapi config (defaults to `./.rmapi`)

### First-Time Setup

1. **reMarkable Authentication**: On first run, rmapi will prompt for authentication:
   - Visit https://my.remarkable.com/device/browser
   - Get your one-time code
   - Enter it when prompted

2. **TaskManager Authentication**: The SDK will automatically handle OAuth flow

## Development

### Running Tests
```bash
pytest tests/
```

### Type Checking
```bash
mypy src/
```

### Code Formatting
```bash
ruff format src/
```

## Troubleshooting

### Authentication Issues
**reMarkable:**
```bash
rm -rf .rmapi
# Re-run any upload command to re-authenticate
```

**TaskManager:**
```bash
# Check your .env file has correct credentials
# Verify TASKMANAGER_URL is accessible
```

### Import Errors
Make sure the package is installed:
```bash
pip install -e .
```

### PDF Processing Errors
- Ensure PDFs are not corrupted
- Check you have sufficient disk space
- Verify Anthropic API key is valid

## Dependencies

- **anthropic**: Claude AI API client
- **reportlab**: PDF generation
- **taskmanager-sdk**: TaskManager API integration
- **python-dotenv**: Environment variable management
- **rmapi**: reMarkable cloud interface (auto-downloaded)

## Contributing

Contributions are welcome! Please feel free to submit issues and pull requests.

## License

MIT License - See LICENSE file for details

## Acknowledgments

- rmapi is maintained at https://github.com/ddvk/rmapi
- TaskManager SDK for API integration
- Claude AI for intelligent paper analysis
